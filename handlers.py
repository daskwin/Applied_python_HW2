from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from states import ProfileStates, FoodLogStates
from config import API_KEY_WEATHER
from utils import (
    get_current_temperature,
    calc_daily_water,
    calc_daily_calories,
    get_food_info,
    get_calories_burned_ninjas
)

users = {}

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "‚öôÔ∏è <b>/set_profile</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "‚ùì <b>/help</b> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n\n"
        "üìù <b>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "üíß <b>/log_water</b> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É.\n"
        "ü•ó <b>/log_food</b> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç.\n"
        "üî• <b>/log_workout</b> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n\n"
        "üìä <b>/check_progress</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º."
    )
    await message.reply(help_text, parse_mode="HTML")


@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.
    """
    # –ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileStates.weight)


@router.message(ProfileStates.weight)
async def process_weight(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ä–æ—Å—Ç–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤–µ—Å–∞, —Ç–∏–ø - float
    try:
        weight = float(message.text.replace(',', '.'))
    except ValueError:
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∫–æ—Ä—Ä–µ—Ç–Ω–æ
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users:
        users[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]["weight"] = weight

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileStates.height)


@router.message(ProfileStates.height)
async def process_height(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞, —Ç–∏–ø - float
    try:
        height = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]["height"] = height

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.age)


@router.message(ProfileStates.age)
async def process_age(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞, —Ç–∏–ø - int
    try:
        age = int(message.text)
    except ValueError:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]["age"] = age

    # –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await state.set_state(ProfileStates.gender)


@router.callback_query(StateFilter(ProfileStates.gender))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    user_id = callback_query.from_user.id
    if callback_query.data == "gender_male":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º—É–∂—Å–∫–æ–π –ø–æ–ª
        users[user_id]["gender"] = "male"
        gender_text = "–ú—É–∂—Å–∫–æ–π"
    elif callback_query.data == "gender_female":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª
        users[user_id]["gender"] = "female"
        gender_text = "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    await callback_query.message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {gender_text}")
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {gender_text}")

    # –ó–∞–ø—Ä–æ—Å –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await callback_query.message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(ProfileStates.activity_minutes)


@router.message(ProfileStates.activity_minutes)
async def process_activity_minutes(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞, —Ç–∏–ø - int
    try:
        activity_minutes = int(message.text)
    except ValueError:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω.) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]["activity_minutes"] = activity_minutes

    # –°–µ–ª–µ–∫—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–õ—ë–≥–∫–∞—è", callback_data="activity_light")],
            [InlineKeyboardButton(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è", callback_data="activity_middle")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è", callback_data="activity_high")]
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.set_state(ProfileStates.activity_level)


@router.callback_query(StateFilter(ProfileStates.activity_level))
async def process_activity_level(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞.
    """
    user_id = callback_query.from_user.id
    if callback_query.data == "activity_light":
        users[user_id]["activity_level"] = "light"
        activity_text = "–õ—ë–≥–∫–∞—è"
    elif callback_query.data == "activity_middle":
        users[user_id]["activity_level"] = "middle"
        activity_text = "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
    elif callback_query.data == "activity_high":
        users[user_id]["activity_level"] = "high"
        activity_text = "–í—ã—Å–æ–∫–∞—è"
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    await callback_query.message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_text}")
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_text}")

    # –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
    await callback_query.message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(ProfileStates.city)


@router.message(ProfileStates.city)
async def process_city(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ FSMContext.
    """
    user_id = message.from_user.id
    city = message.text.strip()

    users[user_id]["city"] = city

    users[user_id].setdefault("logged_water", 0)
    users[user_id].setdefault("logged_calories", 0)
    users[user_id].setdefault("burned_calories", 0)

    temp_result_api = get_current_temperature(city, API_KEY_WEATHER)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ - –±–µ—Ä–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É 20¬∞C
    if isinstance(temp_result_api, dict):
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è '{city}'. "
                            f"–°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–∞ —É–ª–∏—Ü–µ 20¬∞C.")
        temperature = 20
    else:
        temperature = temp_result_api

    weight = users[user_id]["weight"]
    height = users[user_id]["height"]
    age = users[user_id]["age"]
    activity_minutes = users[user_id]["activity_minutes"]
    activity_level = users[user_id]["activity_level"]
    gender = users[user_id]["gender"]

    # –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º
    water_goal = calc_daily_water(weight, activity_minutes, temperature)
    calorie_goal = calc_daily_calories(weight, height, age, activity_minutes, activity_level, gender)

    users[user_id]["water_goal"] = int(water_goal)
    users[user_id]["calorie_goal"] = int(calorie_goal)

    summary = (
        "<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n"
        f"‚öñÔ∏è <b>–í–µ—Å:</b> {weight} –∫–≥\n"
        f"üìè <b>–†–æ—Å—Ç:</b> {height} —Å–º\n"
        f"üåü <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"üë§ <b>–ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"üí™Ô∏è <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {activity_minutes} –º–∏–Ω/–¥–µ–Ω—å ({activity_level.capitalize()})\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city} (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C)\n\n"
        f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
        f"üíß <b>–í–æ–¥–∞:</b> {users[user_id]['water_goal']} –º–ª/–¥–µ–Ω—å\n"
        f"ü•ó <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {users[user_id]['calorie_goal']} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
    )

    await message.reply(summary, parse_mode="HTML")
    await state.clear()


@router.message(Command("log_water"))
async def cmd_log_water(message: Message, command: CommandObject):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–∏—Ç—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ–¥—É.

    –ü—Ä–∏–º–µ—Ä: /log_water 250

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        command (CommandObject): –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª.).
    """
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /set_profile
    if user_id not in users or "water_goal" not in users[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/log_water 300")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
    try:
        water_amount = int(command.args)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–ª.")
        return

    users[user_id]["logged_water"] += water_amount

    water_goal = users[user_id]["water_goal"]
    logged_water = users[user_id]["logged_water"]
    delta = water_goal - logged_water

    if delta > 0:
        msg = (
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {water_amount} –º–ª. –≤–æ–¥—ã.\n"
            f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {logged_water} –º–ª.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {delta} –º–ª."
        )
    else:
        msg = (
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {water_amount} –º–ª. –≤–æ–¥—ã.\n"
            f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {logged_water} –º–ª.\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéä –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ (–∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏) –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã."
        )

    await message.reply(msg)


@router.message(Command("log_food"))
async def cmd_log_food(message: Message, command: CommandObject, state: FSMContext):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å—ä–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –µ–¥—É.

    –ü—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        command (CommandObject): –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞).
        state (FSMContext): –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —à–∞–≥–∞–º–∏.
    """
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /set_profile
    if user_id not in users or "calorie_goal" not in users[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not command.args:
        await message.reply("–§–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return

    product_name = command.args.strip()
    info = get_food_info(product_name)

    # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not info:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç '{product_name}' –≤ –±–∞–∑–µ OpenFoodFacts.")
        return

    # –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(
        product_name=info["name"],
        calories_per_100=info["calories"]
    )

    # –í—ã–∑–æ–≤ –≥—Ä–∞–º–º–æ–≤–∫–∏ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ
    await message.reply(
        f"–ù–∞–π–¥–µ–Ω–æ: {info['name']}.\n"
        f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
    )
    await state.set_state(FoodLogStates.waiting_for_grams)


@router.message(FoodLogStates.waiting_for_grams)
async def process_food_grams(message: Message, state: FSMContext):
    """
    –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º–æ–≤, —Ç–∏–ø - float
    try:
        grams = float(message.text)
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤).")
        return

    data = await state.get_data()
    product_name = data.get("product_name")
    cals_per_100 = data.get("calories_per_100")

    if cals_per_100 is None:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}.")
        await state.clear()
        return

    try:
        cals_per_100 = float(cals_per_100)
    except (ValueError, TypeError):
        await message.reply(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}.")
        await state.clear()
        return

    total_cals = (cals_per_100 * grams) / 100.0

    users[user_id]["logged_calories"] = users[user_id].get("logged_calories") + total_cals

    total_cals_rounded = round(total_cals, 1)
    total_logged = round(users[user_id]["logged_calories"], 1)

    await message.reply(
        f"–ó–∞–ø–∏—Å–∞–Ω–æ: {product_name} ~ {grams} –≥ = {total_cals_rounded} –∫–∫–∞–ª.\n"
        f"–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_logged} –∫–∫–∞–ª."
    )

    await state.clear()


@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message, command: CommandObject):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ API Ninjas.
    –ü—Ä–∏–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç: /log_workout <activity> <minutes>
                     /log_workout running 30
    """
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /set_profile
    if user_id not in users or "calorie_goal" not in users[user_id] or "water_goal" not in users[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    if not command.args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <activity> <minutes>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout running 30 (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!)")
        return

    parts = command.args.split()
    if len(parts) < 2:
        await message.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: /log_workout <activity> <minutes>")
        return

    activity = parts[0]

    try:
        minutes = int(parts[1])
    except ValueError:
        await message.reply("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if minutes <= 0:
        await message.reply("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0.")
        return

    user_weight_kg = users[user_id]["weight"]

    burned_cals = get_calories_burned_ninjas(activity, minutes, user_weight_kg)

    if burned_cals == 0.0:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è '{activity}'.")
        return

    users[user_id]["burned_calories"] += burned_cals
    extra_water = (minutes // 30) * 200
    users[user_id]["water_goal"] += extra_water

    water_goal = users[user_id]["water_goal"]
    burned_rounded = round(burned_cals, 1)
    total_rounded = round(users[user_id]["burned_calories"], 1)
    total_water = users[user_id]["logged_water"]

    response_text = (
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {activity} ({activity}), {minutes} –º–∏–Ω.\n"
        f"–°–æ–∂–∂–µ–Ω–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ): {burned_rounded} –∫–∫–∞–ª.\n"
        f"–í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_rounded} –∫–∫–∞–ª.\n\n"
    )

    if extra_water > 0:
        response_text += (
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: +{extra_water} –º–ª. –≤–æ–¥—ã (–ø–æ 200 –º–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç).\n"
            f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_water} –º–ª.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {water_goal-total_water} –º–ª."
        )
    else:
        response_text += (
            f"–î–æ 30 –º–∏–Ω—É—Ç ‚Äî –±–µ–∑ –¥–æ–±–∞–≤–∫–∏ –≤–æ–¥—ã.\n"
            f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_water} –º–ª."
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {water_goal-total_water} –º–ª."
        )

    await message.answer(response_text)


@router.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    """
    –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π.
    """
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    user_data = users[user_id]

    # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ
    water_goal = user_data.get("water_goal")
    logged_water = user_data.get("logged_water")

    calorie_goal = user_data.get("calorie_goal")
    logged_calories = user_data.get("logged_calories")
    burned_calories = user_data.get("burned_calories")

    water_delta = water_goal - logged_water
    if water_delta < 0:
        water_delta = 0

    net_calories = logged_calories - burned_calories

    progress_text = (
        "<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        f"<u>üíß –í–æ–¥–∞</u>:\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_delta} –º–ª\n\n"

        f"<u>ü•ó –ö–∞–ª–æ—Ä–∏–∏</u>:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª\n"
        f"- –ë–∞–ª–∞–Ω—Å (–ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω—ã–µ - —Å–æ–∂–∂—ë–Ω–Ω—ã–µ): {net_calories} –∫–∫–∞–ª\n"
    )

    await message.answer(progress_text, parse_mode="HTML")


def setup_handlers(dp):
    dp.include_router(router)
